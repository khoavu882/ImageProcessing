/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ezxla;

import com.sun.org.apache.xalan.internal.xsltc.dom.BitArray;
import static ezxla.Histogram.grayScale;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartPanel;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author maxiu
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    EqualizedImage equ = new EqualizedImage();
    Histogram his = new Histogram();
    Bitmap bit = new Bitmap();
    LogTrans log = new LogTrans();
    PowerLaw pow = new PowerLaw();
    Max max = new Max();
    Min min = new Min();
    GrayLevel gra = new GrayLevel();
    Median med = new Median();
    Sobel sob = new Sobel();
    Laplacian lap = new Laplacian();
    Averaging ave = new Averaging();
    Duplicate dup = new Duplicate();
    PointDetection point = new PointDetection();
    LineDetection line = new LineDetection();
    EdgeDetection edge = new EdgeDetection();
    Boundary bou = new Boundary();
    Dilation dil = new Dilation();
    Erosion ero = new Erosion();
    Prewitt pre = new Prewitt();

    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        getParaBit = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        parabit = new javax.swing.JTextField();
        getLog = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        getLogBit = new javax.swing.JTextField();
        getPower = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        getPowerLaw1 = new javax.swing.JTextField();
        getPowLaw2 = new javax.swing.JTextField();
        getGray = new javax.swing.JFrame();
        jLabel4 = new javax.swing.JLabel();
        getGrayLevel1 = new javax.swing.JTextField();
        getGrayLevel2 = new javax.swing.JTextField();
        getMatrixFilter = new javax.swing.JFrame();
        jLabel7 = new javax.swing.JLabel();
        getColor = new javax.swing.JTextField();
        getNumberOfMatrix = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        img1 = new javax.swing.JLabel();
        img2 = new javax.swing.JLabel();
        chart2 = new javax.swing.JLabel();
        chart1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jUrl = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mniOpen = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        hiss = new javax.swing.JMenuItem();
        drawLog = new javax.swing.JMenuItem();
        mnBitmap = new javax.swing.JMenuItem();
        powLaw = new javax.swing.JMenuItem();
        grayLevel = new javax.swing.JMenuItem();
        drawMax = new javax.swing.JMenuItem();
        drawMin = new javax.swing.JMenuItem();
        drawMedian = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        drawAveraging = new javax.swing.JMenuItem();
        drawAveragingWithMatrix = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        drawRep = new javax.swing.JMenuItem();
        drawBlack = new javax.swing.JMenuItem();
        drawLaplacian = new javax.swing.JMenuItem();
        drawSobel = new javax.swing.JMenuItem();
        drawPointDetection = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        drawHorizontal = new javax.swing.JMenuItem();
        drawVetical = new javax.swing.JMenuItem();
        drawLeft = new javax.swing.JMenuItem();
        drawRight = new javax.swing.JMenuItem();
        drawEdgeDetection = new javax.swing.JMenuItem();
        drawEro = new javax.swing.JMenuItem();
        drawDilation = new javax.swing.JMenuItem();
        drawBoundary = new javax.swing.JMenuItem();
        drawPrewitt = new javax.swing.JMenuItem();

        getParaBit.setMinimumSize(new java.awt.Dimension(341, 100));
        getParaBit.setSize(new java.awt.Dimension(400, 200));
        getParaBit.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Para Bit");
        getParaBit.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 51, -1, -1));

        parabit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parabitActionPerformed(evt);
            }
        });
        getParaBit.getContentPane().add(parabit, new org.netbeans.lib.awtextra.AbsoluteConstraints(81, 48, 260, -1));

        getLog.setSize(new java.awt.Dimension(400, 200));

        jLabel2.setText("Get Log");

        getLogBit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLogBitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout getLogLayout = new javax.swing.GroupLayout(getLog.getContentPane());
        getLog.getContentPane().setLayout(getLogLayout);
        getLogLayout.setHorizontalGroup(
            getLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getLogBit, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
        getLogLayout.setVerticalGroup(
            getLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getLogLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(getLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(getLogBit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        getPower.setSize(new java.awt.Dimension(400, 200));

        jLabel3.setText("Get Power Law");

        getPowerLaw1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPowerLaw1ActionPerformed(evt);
            }
        });

        getPowLaw2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPowLaw2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout getPowerLayout = new javax.swing.GroupLayout(getPower.getContentPane());
        getPower.getContentPane().setLayout(getPowerLayout);
        getPowerLayout.setHorizontalGroup(
            getPowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getPowerLayout.createSequentialGroup()
                .addGroup(getPowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(getPowerLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(getPowLaw2, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                    .addGroup(getPowerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getPowerLaw1)))
                .addContainerGap())
        );
        getPowerLayout.setVerticalGroup(
            getPowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getPowerLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(getPowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(getPowerLaw1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getPowLaw2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        getGray.setSize(new java.awt.Dimension(400, 200));

        jLabel4.setText("Get Gray Level");

        getGrayLevel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getGrayLevel1ActionPerformed(evt);
            }
        });

        getGrayLevel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getGrayLevel2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout getGrayLayout = new javax.swing.GroupLayout(getGray.getContentPane());
        getGray.getContentPane().setLayout(getGrayLayout);
        getGrayLayout.setHorizontalGroup(
            getGrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getGrayLayout.createSequentialGroup()
                .addGroup(getGrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(getGrayLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(getGrayLevel2, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                    .addGroup(getGrayLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getGrayLevel1)))
                .addContainerGap())
        );
        getGrayLayout.setVerticalGroup(
            getGrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getGrayLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(getGrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(getGrayLevel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getGrayLevel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        getMatrixFilter.setSize(new java.awt.Dimension(400, 200));

        jLabel7.setText("Color");

        getColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getColorActionPerformed(evt);
            }
        });

        getNumberOfMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getNumberOfMatrixActionPerformed(evt);
            }
        });

        jLabel8.setText("Matrix");

        javax.swing.GroupLayout getMatrixFilterLayout = new javax.swing.GroupLayout(getMatrixFilter.getContentPane());
        getMatrixFilter.getContentPane().setLayout(getMatrixFilterLayout);
        getMatrixFilterLayout.setHorizontalGroup(
            getMatrixFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getMatrixFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(getMatrixFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(getMatrixFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getColor)
                    .addComponent(getNumberOfMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                .addContainerGap())
        );
        getMatrixFilterLayout.setVerticalGroup(
            getMatrixFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getMatrixFilterLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(getMatrixFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(getColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(getMatrixFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getNumberOfMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(177, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1270, 720));

        chart2.setMaximumSize(new java.awt.Dimension(640, 311));
        chart2.setName(""); // NOI18N
        chart2.setPreferredSize(new java.awt.Dimension(640, 311));

        chart1.setMaximumSize(new java.awt.Dimension(640, 311));
        chart1.setPreferredSize(new java.awt.Dimension(640, 311));
        chart1.setRequestFocusEnabled(false);

        javax.swing.GroupLayout chart1Layout = new javax.swing.GroupLayout(chart1);
        chart1.setLayout(chart1Layout);
        chart1Layout.setHorizontalGroup(
            chart1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chart1Layout.setVerticalGroup(
            chart1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(img1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addComponent(chart1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(img2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chart2, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(img1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(img2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chart1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jUrl.setEditable(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jLabel5.setText("Original");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jLabel6.setText("After");

        mnFile.setText("File");

        mniOpen.setText("Open File");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnFile.add(mniOpen);

        mniSave.setText("Save As");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnFile.add(mniSave);

        jMenuBar1.add(mnFile);

        jMenu3.setText("Edit");

        hiss.setText("Evalution Histogram");
        hiss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hissActionPerformed(evt);
            }
        });
        jMenu3.add(hiss);

        drawLog.setText("Logarit");
        drawLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawLogActionPerformed(evt);
            }
        });
        jMenu3.add(drawLog);

        mnBitmap.setText("Bitmap");
        mnBitmap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnBitmapActionPerformed(evt);
            }
        });
        jMenu3.add(mnBitmap);

        powLaw.setText("Power Law TransFormation");
        powLaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powLawActionPerformed(evt);
            }
        });
        jMenu3.add(powLaw);

        grayLevel.setText("Gray Level Slicing");
        grayLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayLevelActionPerformed(evt);
            }
        });
        jMenu3.add(grayLevel);

        drawMax.setText("Maximum Filter");
        drawMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawMaxActionPerformed(evt);
            }
        });
        jMenu3.add(drawMax);

        drawMin.setText("Minimum Filter");
        drawMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawMinActionPerformed(evt);
            }
        });
        jMenu3.add(drawMin);

        drawMedian.setText("Median");
        drawMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawMedianActionPerformed(evt);
            }
        });
        jMenu3.add(drawMedian);

        jMenu2.setText("Averaging");

        drawAveraging.setText("Averaging");
        drawAveraging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawAveragingActionPerformed(evt);
            }
        });
        jMenu2.add(drawAveraging);

        drawAveragingWithMatrix.setText("Averaging Weight");
        drawAveragingWithMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawAveragingWithMatrixActionPerformed(evt);
            }
        });
        jMenu2.add(drawAveragingWithMatrix);

        jMenu3.add(jMenu2);

        jMenu1.setText("Duplicate");

        drawRep.setText("Replicate Boder");
        drawRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawRepActionPerformed(evt);
            }
        });
        jMenu1.add(drawRep);

        drawBlack.setText("Paint Boder");
        drawBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawBlackActionPerformed(evt);
            }
        });
        jMenu1.add(drawBlack);

        jMenu3.add(jMenu1);

        drawLaplacian.setText("Laplacian");
        drawLaplacian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawLaplacianActionPerformed(evt);
            }
        });
        jMenu3.add(drawLaplacian);

        drawSobel.setText("Sobel");
        drawSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawSobelActionPerformed(evt);
            }
        });
        jMenu3.add(drawSobel);

        drawPointDetection.setText("Point Detection");
        drawPointDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawPointDetectionActionPerformed(evt);
            }
        });
        jMenu3.add(drawPointDetection);

        jMenu4.setText("Line Detection");

        drawHorizontal.setText("Horizontal");
        drawHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawHorizontalActionPerformed(evt);
            }
        });
        jMenu4.add(drawHorizontal);

        drawVetical.setText("Vetical");
        drawVetical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawVeticalActionPerformed(evt);
            }
        });
        jMenu4.add(drawVetical);

        drawLeft.setText("+45");
        drawLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawLeftActionPerformed(evt);
            }
        });
        jMenu4.add(drawLeft);

        drawRight.setText("-45");
        drawRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawRightActionPerformed(evt);
            }
        });
        jMenu4.add(drawRight);

        jMenu3.add(jMenu4);

        drawEdgeDetection.setText("Edge Detection");
        drawEdgeDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawEdgeDetectionActionPerformed(evt);
            }
        });
        jMenu3.add(drawEdgeDetection);

        drawEro.setText("Erosion");
        drawEro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawEroActionPerformed(evt);
            }
        });
        jMenu3.add(drawEro);

        drawDilation.setText("Dilation");
        drawDilation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawDilationActionPerformed(evt);
            }
        });
        jMenu3.add(drawDilation);

        drawBoundary.setText("Boundary");
        drawBoundary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawBoundaryActionPerformed(evt);
            }
        });
        jMenu3.add(drawBoundary);

        drawPrewitt.setText("Prewitt");
        drawPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawPrewittActionPerformed(evt);
            }
        });
        jMenu3.add(drawPrewitt);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(291, 291, 291)
                .addComponent(jLabel5)
                .addGap(636, 636, 636)
                .addComponent(jLabel6)
                .addGap(268, 268, 268)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jUrl)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser c = new JFileChooser();
        String url = "";
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG, PNG & GIF Images", "jpg", "gif", "png");
        c.setFileFilter(filter);
        c.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(UI.this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String dirtempt = "" + c.getCurrentDirectory();
            File file = c.getSelectedFile();
            if (dirtempt.substring(dirtempt.length() - 1, dirtempt.length()).equals(".")) {
                dirtempt = dirtempt.substring(0, dirtempt.length() - 1);
                url = "" + dirtempt + "" + file.getName();
            } else {

                url = "" + dirtempt + "\\" + file.getName();
            }
            jUrl.setText(url);
            String a = jUrl.getText();
            try {
                BufferedImage img = null;
                img = ImageIO.read(new File(a));
                Image dimg = img.getScaledInstance(img1.getWidth(), img1.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon imageIcon = new ImageIcon(dimg);
                img1.setIcon(imageIcon);
                DefaultCategoryDataset dataset = equ.getDataset(img);
                ChartPanel chartPanel = new ChartPanel(equ.getChart(dataset));
                chartPanel.setVisible(true);

                chart1.setLayout(new java.awt.BorderLayout());
                chart1.add(chartPanel, BorderLayout.CENTER);
                chart1.validate();
            } catch (Exception ex) {
                System.out.println("Load Fail");
            }
        }
        if (rVal == JFileChooser.CANCEL_OPTION) {
        }
    }//GEN-LAST:event_mniOpenActionPerformed

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniSaveActionPerformed

    private void mnBitmapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnBitmapActionPerformed
        // TODO add your handling code here:
        getParaBit.setVisible(true);
    }//GEN-LAST:event_mnBitmapActionPerformed

    private void parabitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parabitActionPerformed
        // TODO add your handling code here;
        String a = jUrl.getText();
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        bit.bitPlaneSlicing(Integer.parseInt(parabit.getText()), img);

        readIamge1(img);
    }//GEN-LAST:event_parabitActionPerformed

    private void drawLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawLogActionPerformed
        // TODO add your handling code here:
        getLog.setVisible(true);
    }//GEN-LAST:event_drawLogActionPerformed

    private void getLogBitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLogBitActionPerformed
        // TODO add your handling code here:
        String a = jUrl.getText();
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        log.logTransformations(Double.parseDouble(getLogBit.getText()), img);

        readIamge1(img);
    }//GEN-LAST:event_getLogBitActionPerformed

    private void getPowerLaw1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPowerLaw1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getPowerLaw1ActionPerformed

    private void powLawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powLawActionPerformed
        // TODO add your handling code here:
        getPower.setVisible(true);
    }//GEN-LAST:event_powLawActionPerformed

    private void grayLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayLevelActionPerformed
        // TODO add your handling code here:
        getGray.setVisible(true);
    }//GEN-LAST:event_grayLevelActionPerformed

    private void getGrayLevel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getGrayLevel1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getGrayLevel1ActionPerformed

    private void getPowLaw2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPowLaw2ActionPerformed
        // TODO add your handling code here:
        String a = jUrl.getText();
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        pow.powerLawTransFormation(Double.parseDouble(getPowerLaw1.getText()), Double.parseDouble(getPowLaw2.getText()), img);

        readIamge1(img);
    }//GEN-LAST:event_getPowLaw2ActionPerformed

    private void getGrayLevel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getGrayLevel2ActionPerformed
        // TODO add your handling code here:
        String a = jUrl.getText();
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        gra.grayLevelSlicing(Integer.parseInt(getGrayLevel1.getText()), Integer.parseInt(getGrayLevel2.getText()), img);

        readIamge1(img);
    }//GEN-LAST:event_getGrayLevel2ActionPerformed

    private void drawMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawMedianActionPerformed
        // TODO add your handling code here:
        String a = jUrl.getText();
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        med.medianFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawMedianActionPerformed

    private void drawSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawSobelActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        sob.sobelFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawSobelActionPerformed

    private void drawLaplacianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawLaplacianActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        lap.laplacianFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawLaplacianActionPerformed

    private void hissActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hissActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        his.drawHistogram1(img);

        readIamge1(img);
    }//GEN-LAST:event_hissActionPerformed

    private void drawPointDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawPointDetectionActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }
        point.pointDetectionFilter(img);
        readIamge1(img);
    }//GEN-LAST:event_drawPointDetectionActionPerformed

    private void drawEdgeDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawEdgeDetectionActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }
        edge.edgeDetectionFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawEdgeDetectionActionPerformed

    private void getColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getColorActionPerformed

    private void getNumberOfMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getNumberOfMatrixActionPerformed
        // TODO add your handling code here:
//        if(){
//            ;
//        }
    }//GEN-LAST:event_getNumberOfMatrixActionPerformed

    private void drawRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawRepActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }
        dup.replicateBorder(img);

        readIamge1(img);
    }//GEN-LAST:event_drawRepActionPerformed

    private void drawBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawBlackActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        dup.paintBorder(img);

        readIamge1(img);
    }//GEN-LAST:event_drawBlackActionPerformed

    private void drawHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawHorizontalActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        line.horizontalFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawHorizontalActionPerformed

    private void drawVeticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawVeticalActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        line.veticalFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawVeticalActionPerformed

    private void drawLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawLeftActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        line.leftFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawLeftActionPerformed

    private void drawRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawRightActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        line.rightFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawRightActionPerformed

    private void drawAveragingWithMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawAveragingWithMatrixActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        ave.averagingWeightFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawAveragingWithMatrixActionPerformed

    private void drawAveragingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawAveragingActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        ave.averagingFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawAveragingActionPerformed

    private void drawBoundaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawBoundaryActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        bou.boudaryFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawBoundaryActionPerformed

    private void drawDilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawDilationActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        dil.drawDilation(img);

        readIamge1(img);
    }//GEN-LAST:event_drawDilationActionPerformed

    private void drawMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawMaxActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }
        
        grayScale(img);

        max.maxFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawMaxActionPerformed

    private void drawMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawMinActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        grayScale(img);
        
        min.minFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawMinActionPerformed

    private void drawEroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawEroActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }

        ero.erosionFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawEroActionPerformed

    private void drawPrewittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawPrewittActionPerformed
        // TODO add your handling code here:
        BufferedImage img = null;
        String a = jUrl.getText();
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }
        
        pre.prewittFilter(img);

        readIamge1(img);
    }//GEN-LAST:event_drawPrewittActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    public BufferedImage readImage(String a) {
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(a));
        } catch (IOException ex) {
            System.out.println("Load khong thanh cong");
        }
        return img;
    }

    public void readIamge1(BufferedImage img) {
        Image dimg = img.getScaledInstance(img2.getWidth(), img2.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(dimg);
        img2.setIcon(imageIcon);
        DefaultCategoryDataset dataset = equ.getDataset(img);
        ChartPanel chartPanel = new ChartPanel(equ.getChart(dataset));
        chartPanel.setVisible(true);

        chart2.setLayout(new java.awt.BorderLayout());
        chart2.add(chartPanel, BorderLayout.CENTER);
        chart2.validate();
    }

    public static void drawBlackAndWhite(BufferedImage img) {
        double ave = 0;
        double ave3 = 0;

        int dem = 0;
        int width = img.getWidth();
        int height = img.getHeight();

        Color c;

        for (int row = 0; row < height; row++) {
            for (int col = 0; col < width; col++) {
                c = new Color(img.getRGB(col, row));
                int gray = c.getRed();
                ave = ave + gray;
            }
        }

        ave = ave / (width * height);
        double t = ave;
        System.out.println(ave);
        int ave1, ave2, dem1, dem2;
        do {
            ave1 = 0;
            ave2 = 0;
            dem1 = 0;
            dem2 = 0;
            for (int row = 0; row < height; row++) {
                for (int col = 0; col < width; col++) {
                    c = new Color(img.getRGB(col, row));
                    int gray = c.getRed();

                    if (gray < t) {
                        ave1 += gray;
                        dem1++;
                    } else {
                        ave2 += gray;
                        dem2++;
                    }
                }
            }
            if (dem1 == 0) {
                dem1 = 1;
            }
            if (dem2 == 0) {
                dem2 = 1;
            }
            ave3 = (ave1 / dem1 + ave2 / dem2) / 2;
            System.out.println("--" + ave3);

            if ((int) ave3 == (int) t) {
                break;
            } else {
                t = ave3;
            }
        } while (true);
        System.out.println(t);
        for (int row = 0; row < height; row++) {
            for (int col = 0; col < width; col++) {
                c = new Color(img.getRGB(col, row));
                int gray = c.getRed();
                Color newc = new Color(255, 255, 255);
                if (gray > t) {
                    img.setRGB(col, row, newc.getRGB());
                } else {
                    img.setRGB(col, row, 0);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chart1;
    private javax.swing.JLabel chart2;
    private javax.swing.JMenuItem drawAveraging;
    private javax.swing.JMenuItem drawAveragingWithMatrix;
    private javax.swing.JMenuItem drawBlack;
    private javax.swing.JMenuItem drawBoundary;
    private javax.swing.JMenuItem drawDilation;
    private javax.swing.JMenuItem drawEdgeDetection;
    private javax.swing.JMenuItem drawEro;
    private javax.swing.JMenuItem drawHorizontal;
    private javax.swing.JMenuItem drawLaplacian;
    private javax.swing.JMenuItem drawLeft;
    private javax.swing.JMenuItem drawLog;
    private javax.swing.JMenuItem drawMax;
    private javax.swing.JMenuItem drawMedian;
    private javax.swing.JMenuItem drawMin;
    private javax.swing.JMenuItem drawPointDetection;
    private javax.swing.JMenuItem drawPrewitt;
    private javax.swing.JMenuItem drawRep;
    private javax.swing.JMenuItem drawRight;
    private javax.swing.JMenuItem drawSobel;
    private javax.swing.JMenuItem drawVetical;
    private javax.swing.JTextField getColor;
    private javax.swing.JFrame getGray;
    private javax.swing.JTextField getGrayLevel1;
    private javax.swing.JTextField getGrayLevel2;
    private javax.swing.JFrame getLog;
    private javax.swing.JTextField getLogBit;
    private javax.swing.JFrame getMatrixFilter;
    private javax.swing.JTextField getNumberOfMatrix;
    private javax.swing.JFrame getParaBit;
    private javax.swing.JTextField getPowLaw2;
    private javax.swing.JFrame getPower;
    private javax.swing.JTextField getPowerLaw1;
    private javax.swing.JMenuItem grayLevel;
    private javax.swing.JMenuItem hiss;
    private javax.swing.JLabel img1;
    private javax.swing.JLabel img2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jUrl;
    private javax.swing.JMenuItem mnBitmap;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JTextField parabit;
    private javax.swing.JMenuItem powLaw;
    // End of variables declaration//GEN-END:variables
}
